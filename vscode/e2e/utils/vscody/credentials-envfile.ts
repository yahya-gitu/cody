import { execSync } from 'node:child_process'
import fs from 'node:fs'
import path from 'node:path'
import dedent from 'dedent'
import { CODY_VSCODE_ROOT_DIR } from '../helpers'

const existingRegex = /^([^=]+)=(.*)$/m
export const CREDENTIALS_ENVFILE_PATH = path.join(CODY_VSCODE_ROOT_DIR, '.credentials.env')

const tokens: [string, string][] = [
    // [EXPORTED_NAME, SECRET_NAME]
    ['SRC_DOTCOM_PRO_ACCESS_TOKEN', 'CODY_PRO_ACCESS_TOKEN'],
    // # This is a token for a Cody Pro account with rate limits.
    ['SRC_DOTCOM_PRO_RATE_LIMIT_ACCESS_TOKEN', 'CODY_PRO_RATE_LIMITED_ACCESS_TOKEN'],
    // # This is a token for a Cody Free account that is rate limited.
    ['SRC_ACCESS_TOKEN_FREE_USER_WITH_RATE_LIMIT', 'CODY_FREE_RATE_LIMITED_ACCESS_TOKEN'],
    ['SRC_ENTERPRISE_ACCESS_TOKEN', 'CODY_ENTERPRISE_ACCESS_TOKEN'],
    ['SRC_S2_ACCESS_TOKEN', 'CODY_S2_ACCESS_TOKEN'],
]
const tokenExportedNames = Array.from(tokens.map(([exportedName]) => exportedName))

function getExistingValues(): Map<string, string> {
    const existingContent = (() => {
        try {
            return fs.readFileSync(CREDENTIALS_ENVFILE_PATH, 'utf-8')
        } catch {
            return ''
        }
    })()
    const values = new Map<string, string>()
    for (const line of existingContent.split('\n')) {
        const match = existingRegex.exec(line)
        if (match) {
            const [, name, value] = match
            if (tokenExportedNames.includes(name)) {
                values.set(name, value)
            }
        }
    }

    return values
}

function withMissingValues(values: Map<string, string>) {
    const withMissing = new Map(values)
    for (const [exportedName, secretName] of tokens) {
        if (withMissing.has(exportedName)) {
            continue
        }
        const token = execSync(
            `gcloud secrets versions access latest --secret ${secretName} --project cody-agent-tokens --quiet`,
            { encoding: 'utf-8' }
        )
        withMissing.set(exportedName, token.trim())
    }
    return withMissing
}
/**
 * Updates env file
 * @returns true if env file was updated
 */
export function updateEnvFile(): boolean {
    const existingValues = getExistingValues()
    const values = withMissingValues(existingValues)

    let hasChanges = false
    for (const name of Array.from(values.keys())) {
        if (existingValues.get(name) !== values.get(name)) {
            console.log(`Updating ${name}`, values.get(name), existingValues.get(name))
            hasChanges = true
        }
    }

    if (!hasChanges) {
        return false
    }

    const content = dedent(`
        # This file is automatically generated by \`scripts/export-credentials.ts\`

        ${Array.from(values.entries())
            .map(([name, value]) => `${name}=${value}`)
            .sort()
            .join('\n')}
    `)

    fs.writeFileSync(CREDENTIALS_ENVFILE_PATH, content)

    return true
}
